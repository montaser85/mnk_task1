 Deployment info:

 Make sure you change absolute paths to relative paths
In /public/index.html, App.svelte (json file)
e.g., Replace “/bundle/bundle.js” with “./bundle/bundle.js”
Same thing for bundle.css, global.css, census2000.json
Run "npm run build" (just like you did "npm run dev")
Create a new branch named gh-pages
You can do that from github.com
Or "git checkout --orphan gh-pages"
Remove all files in the branch if there is an
Copy and paste all files in /public/ in your main branch into the root folder of the gh-pages branch.
The gh-pages branch should not have a folder named "public". The root should have only: index.html, global.css, build folder, and static folder.
From your repo on github.com, go to Settings -> Pages -> Source, and select the "gh-pages" branch and save it.
The URL will be shown in that page (https://div-classroom.github.io/visual-analytics-w4-2-svelte-{your username}/). Click it to see if it works. It may take a few minutes to be activated. 
 
 
 **********************************************************************************
 Detailed Logic For showing the GameBoard components:

          {#if (goes_first == "X") & first_moves.includes(box_list[box])}
            {(column_index = box % 9)}
            {(row_index = Math.floor(box / 9))}
            <image
              class="XSymbol"
              x={GB_X1 + column_index * boardBoxHeight}
              y={GB_Y1 + row_index * boardBoxHeight}
              width={boardBoxWidth}
              height={boardBoxHeight}
              href="static/images/X.png"
              alt=""
            />
          {:else if (goes_first == "Y") & first_moves.includes(box_list[box])}
            {(column_index = box % 9)}
            {(row_index = Math.floor(box / 9))}
            <image
              class="OSymbol"
              x={GB_X1 + column_index * boardBoxHeight}
              y={GB_Y1 + row_index * boardBoxHeight}
              width={boardBoxWidth}
              height={boardBoxHeight}
              href="static/images/O.png"
              alt=""
            />
          {:else if (goes_first == "X") & second_moves.includes(box_list[box])}
            {(column_index = box % 9)}
            {(row_index = Math.floor(box / 9))}
            <image
              class="OSymbol"
              x={GB_X1 + column_index * boardBoxHeight}
              y={GB_Y1 + row_index * boardBoxHeight}
              width={boardBoxWidth}
              height={boardBoxHeight}
              href="static/images/O.png"
              alt=""
            />
          {:else if (goes_first == "Y") & second_moves.includes(box_list[box])}
            {(column_index = box % 9)}
            {(row_index = Math.floor(box / 9))}
            <image
              class="XSymbol"
              x={GB_X1 + column_index * boardBoxHeight}
              y={GB_Y1 + row_index * boardBoxHeight}
              width={boardBoxWidth}
              height={boardBoxHeight}
              href="static/images/X.png"
              alt=""
            />
          {/if}

***************************************************************************

{#if (move_num == max_move) & win_seq.includes(box_list[box])}
            {#if winner=="X"}
                <g
                class="Win_Box_and_Symbol {box_select == box?'this-win-x-box-selected':'this-win-x-box-not-selected'}"
                on:mouseenter={() => {
                    box_update(box);
                }}
                on:mouseleave={() => {
                    box_reupdate();
                }}
                >
                <rect
                    class="BoardBox"
                    x={GB_X1 + column_index * boardBoxHeight}
                    y={GB_Y1 + row_index * boardBoxHeight}
                    width={boardBoxWidth}
                    height={boardBoxHeight}
                />
                {#if (move_num > 0) & (first_moves.includes(box_list[box]) || second_moves.includes(box_list[box]))}
                    {(column_index = box % 9)}
                    {(row_index = Math.floor(box / 9))}
                    <image
                    class="XSymbol"
                    x={GB_X1 + column_index * boardBoxHeight}
                    y={GB_Y1 + row_index * boardBoxHeight}
                    width={symbolDimension}
                    height={symbolDimension}
                    href="static/images/{SymbolName(box)}.png"
                    alt=""
                    />
                    <text
                    class="SymbolSuffix"
                    x={GB_X1 +
                        column_index * boardBoxHeight +
                        boardBoxHeight * 0.8}
                    y={GB_Y1 + row_index * boardBoxHeight + 20}
                    >{suffixName(box)}
                    </text>
                {/if}
                </g>
            {:else if winner=="O"}
                <g
                class="Win_Box_and_Symbol {box_select == box?'this-win-o-box-selected':'this-win-o-box-not-selected'}"
                on:mouseenter={() => {
                    box_update(box);
                }}
                on:mouseleave={() => {
                    box_reupdate();
                }}
                >
                <rect
                    class="BoardBox"
                    x={GB_X1 + column_index * boardBoxHeight}
                    y={GB_Y1 + row_index * boardBoxHeight}
                    width={boardBoxWidth}
                    height={boardBoxHeight}
                />
                {#if (move_num > 0) & (first_moves.includes(box_list[box]) || second_moves.includes(box_list[box]))}
                    {(column_index = box % 9)}
                    {(row_index = Math.floor(box / 9))}
                    <image
                    class="XSymbol"
                    x={GB_X1 + column_index * boardBoxHeight}
                    y={GB_Y1 + row_index * boardBoxHeight}
                    width={symbolDimension}
                    height={symbolDimension}
                    href="static/images/{SymbolName(box)}.png"
                    alt=""
                    />
                    <text
                    class="SymbolSuffix"
                    x={GB_X1 +
                        column_index * boardBoxHeight +
                        boardBoxHeight * 0.8}
                    y={GB_Y1 + row_index * boardBoxHeight + 20}
                    >{suffixName(box)}
                    </text>
                {/if}
                </g>
            {/if}
            
          {:else}
            <g
              class="Box_and_Symbol {box_select == box
                ? 'this-box-selected'
                : 'this-box-not-selected'}"
              on:mouseenter={() => {
                box_update(box);
              }}
              on:mouseleave={() => {
                box_reupdate();
              }}
            >
              <rect
                class="BoardBox"
                x={GB_X1 + column_index * boardBoxHeight}
                y={GB_Y1 + row_index * boardBoxHeight}
                width={boardBoxWidth}
                height={boardBoxHeight}
              />
              {#if (move_num > 0) & (first_moves.includes(box_list[box]) || second_moves.includes(box_list[box]))}
                {(column_index = box % 9)}
                {(row_index = Math.floor(box / 9))}
                <image
                  class="XSymbol"
                  x={GB_X1 + column_index * boardBoxHeight}
                  y={GB_Y1 + row_index * boardBoxHeight}
                  width={symbolDimension}
                  height={symbolDimension}
                  href="static/images/{SymbolName(box)}.png"
                  alt=""
                />
                <text
                  class="SymbolSuffix"
                  x={GB_X1 +
                    column_index * boardBoxHeight +
                    boardBoxHeight * 0.8}
                  y={GB_Y1 + row_index * boardBoxHeight + 20}
                  >{suffixName(box)}
                </text>
              {/if}
            </g>
          {/if}
        {/each}




        ********************

        {console.log(box)}   
        <g
        class="Box_and_Symbol {box_select == box
          ? 'this-box-selected'
          : 'this-box-not-selected'}"
        on:mouseenter={() => {
          box_update(box);
        }}
        on:mouseleave={() => {
          box_reupdate();
        }}
      >
        <rect
          class="BoardBox"
          x={GB_X1 + column_index * boardBoxHeight}
          y={GB_Y1 + row_index * boardBoxHeight}
          width={boardBoxWidth}
          height={boardBoxHeight}
        />
        {#if (move_num > 0) & (first_moves.includes(box_list[box]) || second_moves.includes(box_list[box]))}
          {(column_index = box % 9)}
          {(row_index = Math.floor(box / 9))}
          <image
            class="XSymbol"
            x={GB_X1 + column_index * boardBoxHeight}
            y={GB_Y1 + row_index * boardBoxHeight}
            width={symbolDimension}
            height={symbolDimension}
            href="static/images/{SymbolName(box)}.png"
            alt=""
          />
          <text
            class="SymbolSuffix"
            x={GB_X1 +
              column_index * boardBoxHeight +
              boardBoxHeight * 0.8}
            y={GB_Y1 + row_index * boardBoxHeight + 20}
            >{suffixName(box)}
          </text>
        {/if}
      </g>



******************************************************

{#if btw_arrays_taken.length == index + 1}
              {#each btw_array as box}
                <rect
                  class="ChartBox {box_select == box
                    ? 'this-box-selected'
                    : 'this-box-not-selected'}"
                  x={xValueUpdate(btw_array.indexOf(box))}
                  y={yValueUpdate(box, index)}
                  width={chartBoxWidth}
                  height={chartBoxHeight}
                  on:mouseenter={() => {
                    box_num = box_list.indexOf(box);
                    otherChartColor=true;
                    box_update(box_num);
                    
                  }}
                  on:mouseleave={() => {
                    box_reupdate();
                  }}
                />
              {/each}
            {:else}
              {#each btw_array as box, i}
                <rect
                  class="ChartPreviousBox"
                  x={xValueUpdate(btw_array.indexOf(box))}
                  y={yValueUpdate(box, index)}
                  width={chartBoxWidth}
                  height={chartBoxHeight}
                  style="fill:{colorUpdate(index,otherChartColor)}"
                />
              {/each}
            {/if}